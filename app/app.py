import os
from typing import Tuple, List
import streamlit as st
from langchain.embeddings.huggingface import HuggingFaceInferenceAPIEmbeddings
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_groq import ChatGroq
from pathlib import Path
from langchain_community.vectorstores import FAISS
from langchain_core.documents import Document
import pickle
import shutil
from typing import List
from langchain.schema import Document
from langchain.prompts import ChatPromptTemplate, FewShotChatMessagePromptTemplate

# Configura√ß√µes para suprimir avisos
import warnings
warnings.filterwarnings('ignore')
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

# Configura√ß√£o de cache para as chaves API
@st.cache_data
def load_api_keys() -> Tuple[str, str]:
    """Carrega as chaves API do Streamlit Secrets."""
    try:
        return (
            st.secrets["api_keys"]["groq_api_key"],
            st.secrets["api_keys"]["hf_api_key"]
        )
    except Exception as e:
        st.error("‚ö†Ô∏è Erro ao carregar chaves API. Verifique as configura√ß√µes.")
        raise ValueError(f"Erro nas chaves API: {e}")

# Inicializa√ß√£o do modelo de embeddings
@st.cache_resource
def initialize_embeddings() -> HuggingFaceInferenceAPIEmbeddings:
    """Inicializa o modelo de embeddings com cache."""
    try:
        groq_key, hf_key = load_api_keys()
        os.environ["GROQ_API_KEY"] = groq_key
        os.environ["HF_API_KEY"] = hf_key
        
        return HuggingFaceInferenceAPIEmbeddings(
            api_key=hf_key,
            model_name="sentence-transformers/all-MiniLM-L6-v2"
        )
    except Exception as e:
        st.error("‚ö†Ô∏è Erro na inicializa√ß√£o dos embeddings")
        raise ValueError(f"Erro nos embeddings: {e}")

@st.cache_resource
def initialize_vector_store() -> FAISS:
    """Inicializa e carrega o √≠ndice FAISS."""
    try:
        embeddings = initialize_embeddings()
        index_path = Path(__file__).parent / "faiss_index"
        
        # Para debug
        #st.write(f"Tentando carregar de: {index_path}")
        #st.write(f"O diret√≥rio existe? {index_path.exists()}")
        
        if not index_path.exists():
            raise FileNotFoundError(f"üìÅ Diret√≥rio do √≠ndice FAISS n√£o encontrado em {index_path}")
            
        return FAISS.load_local(
            folder_path=str(index_path),
            embeddings=embeddings,
            allow_dangerous_deserialization=True
        )
    except Exception as e:
        st.error("‚ö†Ô∏è Erro ao carregar √≠ndice FAISS")
        st.write(f"Diret√≥rio atual: {Path.cwd()}")  # Mostra diret√≥rio atual
        raise ValueError(f"Erro no FAISS: {e}")


def get_chat_response(context: List[Document], question: str) -> str:
    examples = [
                {
                    "pergunta": "Como posso utilizar morfina para dor?",
                    "resposta": """
            Pergunta de acompanhamento necess√°ria: Sim.
            1. Pergunta de acompanhamento: Existe refer√™ncia a algum cap√≠tulo no texto?
            Resposta intermedi√°ria: Sim.
            2. Pergunta de acompanhamento: Qual cap√≠tulo √© relevante?
            Resposta intermedi√°ria: Dor.
            3. Pergunta de acompanhamento: Dentro do cap√≠tulo 'Dor', existe refer√™ncia a algum subt√≠tulo?
            Resposta intermedi√°ria: Sim.
            4. Pergunta de acompanhamento: Qual subt√≠tulo?
            Resposta intermedi√°ria: Morfina.

            Resposta final:
            Segundo o Manual de Cuidados Paliativos, 2¬™ ed.:
            Para dor, a morfina pode ser utilizada da seguinte forma:
            Morfina simples:
            - Dose inicial: 5 mg a cada 4 horas (VO), com necessidade de avaliar doses mais baixas em pacientes idosos, com disfun√ß√£o renal ou hep√°tica;
            - Dose m√°xima: N√£o possui dose teto; o limite √© o efeito colateral, devendo ser titulado cuidadosamente;
            - Frequ√™ncia de administra√ß√£o: A cada 4 horas. Em casos espec√≠ficos (idosos, disfun√ß√µes), considerar a cada 6 horas;
            - Vias de administra√ß√£o: Oral, sonda nasoenteral, gastrostomia, endovenosa, subcut√¢nea, hipoderm√≥clise;
            - Equipot√™ncia: Morfina endovenosa √© tr√™s vezes mais potente que a oral;
            - Particularidades: Metabolizada no f√≠gado e excretada pelo rim. Usar com cautela em pacientes com doen√ßa hep√°tica ou renal;
            - Disponibilidade no SUS: Constante na Rename 2022.
            """,
                },
                {
                    "pergunta": "Quais s√£o os efeitos colaterais da morfina?",
                    "resposta": """
            Pergunta de acompanhamento necess√°ria: Sim.
            1. Existe um cap√≠tulo relacionado? Sim.
            Resposta intermedi√°ria: Dor.
            2. Algum subt√≠tulo √© relevante? Sim.
            Resposta intermedi√°ria: Efeitos colaterais.

            Resposta final:
            Segundo o Manual de Cuidados Paliativos, 2¬™ ed.:
            Os principais efeitos colaterais da morfina incluem n√°useas, v√¥mitos, constipa√ß√£o, sonol√™ncia e depress√£o respirat√≥ria. Esses efeitos devem ser monitorados e manejados adequadamente.
            """
                },
                {
                    "pergunta": "Quem s√£o os autores do Capitulo de Dor?",
                    "resposta": """
            Pergunta de acompanhamento necess√°ria: Sim.
            1. Existe um cap√≠tulo relacionado? Sim.
            Resposta intermedi√°ria: Dor.
            2. Algum subt√≠tulo √© relevante? N√£o.
            Resposta intermedi√°ria: Efeitos colaterais.
            3. Foi perguntado sobre nomes de pessoas? Sim.
            Resposta intermedi√°ria: Sim.
            4. √â sobre o livro ou cap√≠tulo?
            Resposta intermedi√°ria: cap√≠tulo.


            Resposta final:
            Os autores do Cap√≠tulo de Dor do Manual de Cuidados Paliativos, 2¬™ ed., s√£o:
            1- Daniel Felgueiras Rolo
            2- Maria Perez Soares D'Alessandro
            3- Gustavo Cassefo
            4- Sergio Seiki Anagusko
            5- Ana Paula Mirarchi Vieira Maiello
            """
                },
                {
                    "pergunta": "Quem s√£o os autores do livro?",
                    "resposta": """
            Pergunta de acompanhamento necess√°ria: Sim.
            1. Existe um cap√≠tulo relacionado? 
            Resposta intermedi√°ria: N√£o.
            2. Algum subt√≠tulo √© relevante? 
            Resposta intermedi√°ria: N√£o.
            3. Foi perguntado sobre nomes de pessoas? Sim.
            Resposta intermedi√°ria: Sim.
            4. √â sobre o livro ou cap√≠tulo?
            Resposta intermedi√°ria: livro.


            Resposta final:
            A equipe respons√°vel pelo Manual de Cuidados Paliativos, 2¬™ ed., foram:

            Editores
            Maria Perez Soares D‚ÄôAlessandro, Lara Cruvinel Barbosa, Sergio Seiki Anagusko, Ana Paula Mirarchi Vieira
            Maiello, Catherine Moreira Conrado, Carina Tischler Pires e Daniel Neves Forte.

            Autores
            Aline de Almada Messias, Ana Cristina Pugliese de Castro, Ana Paula Mirarchi Vieira Maiello, Caroline
            Freitas de Oliveira, Catherine Moreira Conrado, Daniel Felgueiras Rolo, F√°bio Holanda Lacerda, Fernanda
            Pimentel Coelho, Fernanda Spiel Tuoto, Graziela de Ara√∫jo Costa , Gustavo Cassefo, Heloisa Maragno,
            Hieda Ludug√©rio de Souza, Lara Cruvinel Barbosa, Leonardo Bohner Hoffmann, L√≠cia Maria Costa Lima,
            Manuele de Alencar Amorim, Marcelo Oliveira Silva, Maria Perez Soares D‚ÄôAlessandro, Mariana Aguiar
            Bezerra, Nathalia Maria Salione da Silva, Priscila Caccer Tomazelli, Sergio Seiki Anagusko e Sirlei Dal Moro.

            Equipe da Secretaria de Aten√ß√£o Especializada em Sa√∫de do Minist√©rio da Sa√∫de
            Nilton Pereira Junior, Mariana Borges Dias, Ta√≠s Milene Santos de Paiva, Cristiane Maria Reis Cristalda e
            Lorayne Andrade Batista.

            Equipe do CONASS
            Ren√© Jos√© Moreira dos Santos, Eliana Maria Ribeiro Dourado e Luciana Toledo.

            Equipe de apoio HSL:
            Guilherme Fragoso de Mello, Juliana de Lima Gerarduzzi e Luiz Felipe Monteiro Correia.
            """
                }
            ]
    try:
        groq_key, _ = load_api_keys()
        chat_model = ChatGroq(
            api_key=groq_key,
            model_name="llama-3.2-3b-preview",
            temperature=0.3,
            max_tokens=1028
        )

        # Template para os exemplos
        example_prompt = ChatPromptTemplate.from_messages([
            ("human", "Pergunta: {pergunta}\nContexto: {context}\nResposta:")
        ])

        # Integra√ß√£o dos exemplos
        few_shot_prompt = FewShotChatMessagePromptTemplate(
            example_prompt=example_prompt,
            examples=examples,
        )

        # Template final com system message e exemplos
        final_prompt = ChatPromptTemplate.from_messages([
            (
                "system",
                """
Voc√™ √© um Chatbot que auxilia profissionais de sa√∫de em cuidados paliativos com base apenas no Manual de Cuidados Paliativos, 2¬™ ed., S√£o Paulo: Hospital S√≠rio-Liban√™s; Minist√©rio da Sa√∫de, 2023.
Responda apenas com informa√ß√µes documentadas no manual e, caso n√£o saiba a resposta, pergunte se pode buscar em outras fontes.
Estruture as respostas de forma clara, mencionando cap√≠tulos e subt√≠tulos do manual quando relevante.
"""
            ),
            few_shot_prompt,
            ("human", question)
        ])

        # Preparar o contexto
        context_text = " ".join(doc.page_content for doc in context)
        
        # Gerar as mensagens formatadas
        messages = final_prompt.format_messages(
            pergunta=question,
            context=context_text
        )
        
        # Obter a resposta do modelo
        response = chat_model.invoke(messages)
        return response.content
    
    except Exception as e:
        return f"Erro ao processar a pergunta: {str(e)}"

def render_sidebar():
    """Renderiza a sidebar do aplicativo."""
    with st.sidebar:
        image_path = Path(__file__).parent / "static" / "images" / "app_header.png"
        if image_path.exists():
            st.image(
                str(image_path),
                caption="Familia CP-Sirio tentando levar conhecimento a todos",
                use_container_width=True
            )
        
        st.header("‚ÑπÔ∏è Informa√ß√µes")
        st.markdown("""
        üí¨ **Assistente baseado no Manual de Cuidados Paliativos 2¬™ Ed.**
        
        üìö **Dicas de uso:**
        - Use perguntas claras e espec√≠ficas
        - Mencione termos t√©cnicos corretamente
        - Indique o contexto cl√≠nico quando relevante
        """)

def main():
    st.set_page_config(
        page_title="Chatbot - Manual de Cuidados Paliativos",
        page_icon="üè•",
        layout="wide"
    )
    
    st.title("ü§ñ Chatbot do Manual de Cuidados Paliativos")
    render_sidebar()

    try:
        # Inicializa√ß√£o do vector store
        if 'vector_store' not in st.session_state:
            with st.spinner("üìö Carregando base de conhecimento..."):
                st.session_state.vector_store = initialize_vector_store()
                st.success("‚úÖ Base de conhecimento carregada!")

        # Configura√ß√£o do retriever
        retriever = st.session_state.vector_store.as_retriever(
            search_kwargs={"k": 5}
        )

        # Interface do usu√°rio
        user_question = st.text_input(
            "üí≠ Fa√ßa sua pergunta sobre o Manual de Cuidados Paliativos:",
            key="user_input"
        )
        
        if user_question:
            with st.spinner("üîÑ Processando sua pergunta..."):
                context = retriever.get_relevant_documents(user_question)
                response = get_chat_response(context, user_question)

                # Exibi√ß√£o da resposta
                st.markdown("### üìù Resposta:")
                st.markdown(response)

                # Exibi√ß√£o das fontes
                with st.expander("üìö Fontes consultadas"):
                    sources = set(doc.metadata.get('source', 'Desconhecido') 
                                for doc in context)
                    for source in sources:
                        st.markdown(f"- {Path(source).name}")

    except Exception as e:
        st.error(f"‚ö†Ô∏è Erro no aplicativo: {str(e)}")
        st.info("üîÑ Tente recarregar a p√°gina ou contate o suporte.")

if __name__ == "__main__":
    main()
